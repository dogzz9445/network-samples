// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: firexr_scenario.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace FireXR.Protobuf {

  /// <summary>Holder for reflection information generated from firexr_scenario.proto</summary>
  public static partial class FirexrScenarioReflection {

    #region Descriptor
    /// <summary>File descriptor for firexr_scenario.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FirexrScenarioReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVmaXJleHJfc2NlbmFyaW8ucHJvdG8SBkZpcmVYUhobZ29vZ2xlL3Byb3Rv",
            "YnVmL2VtcHR5LnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnBy",
            "b3RvIvoBCglUcmFuc2Zvcm0SCgoCSUQYASABKA0SIwoEVHlwZRgCIAEoDjIV",
            "LkZpcmVYUi5UcmFuc2Zvcm1UeXBlEgwKBE5hbWUYAyABKAkSEQoJUG9zaXRp",
            "b25YGAQgASgCEhEKCVBvc2l0aW9uWRgFIAEoAhIRCglQb3NpdGlvbloYBiAB",
            "KAISEQoJUm90YXRpb25YGAcgASgCEhEKCVJvdGF0aW9uWRgIIAEoAhIRCglS",
            "b3RhdGlvbloYCSABKAISDgoGU2NhbGVYGAogASgCEg4KBlNjYWxlWRgLIAEo",
            "AhIOCgZTY2FsZVoYDCABKAISDAoERGVzYxgNIAEoCSKMAQoQSW50ZXJhY3Rp",
            "b25Qb2ludBIKCgJJRBgBIAEoDRImCghGYWNpbGl0eRgCIAEoDjIULkZpcmVY",
            "Ui5GYWNpbGl0eVR5cGUSDAoEVHlwZRgDIAEoCRIWCg5Mb2NhbFRyYW5zZm9y",
            "bRgEIAEoDRIQCghDb250ZW50cxgFIAEoCRIMCgREZXNjGAYgASgJIkQKCEN1",
            "dFNjZW5lEgoKAklEGAEgASgNEgwKBFR5cGUYAiABKAkSEAoIRmlsZU5hbWUY",
            "AyABKAkSDAoERGVzYxgEIAEoCSLNAQoKT2JqZWN0SW5mbxIKCgJJRBgBIAEo",
            "DRIMCgROYW1lGAIgASgJEiYKCEZhY2lsaXR5GAMgASgOMhQuRmlyZVhSLkZh",
            "Y2lsaXR5VHlwZRIMCgRUeXBlGAQgASgJEhAKCEZpbGVOYW1lGAUgASgJEhsK",
            "E0FjdGl2YXRlZEV2ZW50RGVsYXkYBiABKAISFwoPQWN0aXZhdGVPYmplY3Rz",
            "GAcgAygNEhkKEURlYWN0aXZhdGVPYmplY3RzGAggAygNEgwKBERlc2MYCSAB",
            "KAkiVQoFU291bmQSCgoCSUQYASABKA0SDAoEVHlwZRgCIAEoCRIQCghGaWxl",
            "TmFtZRgDIAEoCRISCgpMb29waW5nVXNlGAQgASgFEgwKBERlc2MYBSABKAki",
            "kAEKB0ZEU0ZpbGUSCgoCSUQYASABKA0SDwoHVmVyc2lvbhgCIAEoBRIQCghE",
            "YXRhVHlwZRgDIAEoCRISCgpEZXZpY2VUeXBlGAQgASgJEhEKCVN0YXJ0VGlt",
            "ZRgFIAEoAhIPCgdFbmRUaW1lGAYgASgCEhAKCEZpbGVOYW1lGAcgASgJEgwK",
            "BERlc2MYCCABKAkiWQoDRkRTEgoKAklEGAEgASgNEiYKCEZhY2lsaXR5GAIg",
            "ASgOMhQuRmlyZVhSLkZhY2lsaXR5VHlwZRIQCghGRFNGaWxlcxgDIAMoDRIM",
            "CgREZXNjGAQgASgJIq8BCgdYUkV2ZW50EgoKAklEGAEgASgNEiEKBFR5cGUY",
            "AiABKA4yEy5GaXJlWFIuWFJFdmVudFR5cGUSDgoGQWN0aW9uGAMgASgJEg4K",
            "BlRhcmdldBgEIAEoCRIQCghDb250ZW50cxgFIAEoCRISCgpTdGFydERlbGF5",
            "GAYgASgCEhEKCU5leHREZWxheRgHIAEoAhIOCgZOZXh0SUQYCCABKA0SDAoE",
            "RGVzYxgJIAEoCSI8ChBFdmFsdWF0aW9uQWN0aW9uEgoKAklEGAEgASgNEg4K",
            "BkFjdGlvbhgCIAEoCRIMCgREZXNjGAMgASgJIqIBCgpFdmFsdWF0aW9uEgoK",
            "AklEGAEgASgNEhAKCENhdGVnb3J5GAIgASgJEg4KBkFjdGlvbhgDIAEoCRIO",
            "CgZXZWlnaHQYBCABKAISDQoFU2NvcmUYBSABKAISDAoEVHlwZRgGIAEoCRIQ",
            "CghDb250ZW50cxgHIAEoCRIZChFFdmFsdWF0aW9uQWN0aW9ucxgIIAMoDRIM",
            "CgREZXNjGAkgASgJIsMCChFTZXBhcmF0ZWRTY2VuYXJpbxIKCgJJRBgBIAEo",
            "DRIPCgdWZXJzaW9uGAIgASgFEhAKCENhdGVnb3J5GAMgAygJEg0KBVRpdGxl",
            "GAQgASgJEhMKC0Rlc2NyaXB0aW9uGAUgASgJEiYKCEZhY2lsaXR5GAYgASgO",
            "MhQuRmlyZVhSLkZhY2lsaXR5VHlwZRIUCgxVc2VQYXJlbnRGRFMYByABKAUS",
            "HQoITG9jYWxGRFMYCCABKAsyCy5GaXJlWFIuRkRTEhUKDUZEU1N0YXJ0RGVs",
            "YXkYCSABKAISGQoRVXNlUGFyZW50RGF5bGlnaHQYCiABKAUSFAoMRGF5bGln",
            "aHRUaW1lGAsgASgCEg8KB1RpbWVvdXQYDCABKAISEwoLRXZhbHVhdGlvbnMY",
            "DSADKA0SEAoIWFJFdmVudHMYDiADKA0i1QEKEENvbWJpbmVkU2NlbmFyaW8S",
            "CgoCSUQYASABKA0SDwoHVmVyc2lvbhgCIAEoBRINCgVUaXRsZRgDIAEoCRIT",
            "CgtEZXNjcmlwdGlvbhgEIAEoCRImCghGYWNpbGl0eRgFIAEoDjIULkZpcmVY",
            "Ui5GYWNpbGl0eVR5cGUSGAoDRkRTGAYgASgLMgsuRmlyZVhSLkZEUxIVCg1G",
            "RFNTdGFydERlbGF5GAcgASgCEhQKDERheWxpZ2h0VGltZRgIIAEoAhIRCglT",
            "Y2VuYXJpb3MYCSADKA0qcwoMRmFjaWxpdHlUeXBlEgoKBkdsb2JhbBAAEhQK",
            "EE11bHRpVXNlRmFjaWxpdHkQARITCg9Db21wbGV4RmFjaWxpdHkQAhITCg9F",
            "bGRlcmx5RmFjaWxpdHkQAxIXChNVbmRlcmdyb3VuZEZhY2lsaXR5EAQqKAoN",
            "VHJhbnNmb3JtVHlwZRIMCghQT1NJVElPThAAEgkKBVNDQUxBEAEqJgoLWFJF",
            "dmVudFR5cGUSCQoFRXZlbnQQABIMCghMaXN0ZW5lchABKrcBCgxDYXRlZ29y",
            "eVR5cGUSCAoETm9uZRAAEhMKD0Vhcmx5RXh0aW5jdGlvbhABEhMKD0ZpcmVS",
            "ZWNvZ25pdGlvbhACEhQKEEZpcmVOb3RpZmljYXRpb24QAxIWChJFdmFjdWF0",
            "aW9uR3VpZGFuY2UQBBIQCgxGaXJlRmFjaWxpdHkQBRIRCg1GaXJlQ293b3Jr",
            "aW5nEAYSDwoLRmlyZUNhbGxpbmcQBxIPCgtTdWRkZW5FdmVudBAIQhKqAg9G",
            "aXJlWFIuUHJvdG9idWZiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::FireXR.Protobuf.FacilityType), typeof(global::FireXR.Protobuf.TransformType), typeof(global::FireXR.Protobuf.XREventType), typeof(global::FireXR.Protobuf.CategoryType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::FireXR.Protobuf.Transform), global::FireXR.Protobuf.Transform.Parser, new[]{ "ID", "Type", "Name", "PositionX", "PositionY", "PositionZ", "RotationX", "RotationY", "RotationZ", "ScaleX", "ScaleY", "ScaleZ", "Desc" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FireXR.Protobuf.InteractionPoint), global::FireXR.Protobuf.InteractionPoint.Parser, new[]{ "ID", "Facility", "Type", "LocalTransform", "Contents", "Desc" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FireXR.Protobuf.CutScene), global::FireXR.Protobuf.CutScene.Parser, new[]{ "ID", "Type", "FileName", "Desc" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FireXR.Protobuf.ObjectInfo), global::FireXR.Protobuf.ObjectInfo.Parser, new[]{ "ID", "Name", "Facility", "Type", "FileName", "ActivatedEventDelay", "ActivateObjects", "DeactivateObjects", "Desc" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FireXR.Protobuf.Sound), global::FireXR.Protobuf.Sound.Parser, new[]{ "ID", "Type", "FileName", "LoopingUse", "Desc" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FireXR.Protobuf.FDSFile), global::FireXR.Protobuf.FDSFile.Parser, new[]{ "ID", "Version", "DataType", "DeviceType", "StartTime", "EndTime", "FileName", "Desc" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FireXR.Protobuf.FDS), global::FireXR.Protobuf.FDS.Parser, new[]{ "ID", "Facility", "FDSFiles", "Desc" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FireXR.Protobuf.XREvent), global::FireXR.Protobuf.XREvent.Parser, new[]{ "ID", "Type", "Action", "Target", "Contents", "StartDelay", "NextDelay", "NextID", "Desc" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FireXR.Protobuf.EvaluationAction), global::FireXR.Protobuf.EvaluationAction.Parser, new[]{ "ID", "Action", "Desc" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FireXR.Protobuf.Evaluation), global::FireXR.Protobuf.Evaluation.Parser, new[]{ "ID", "Category", "Action", "Weight", "Score", "Type", "Contents", "EvaluationActions", "Desc" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FireXR.Protobuf.SeparatedScenario), global::FireXR.Protobuf.SeparatedScenario.Parser, new[]{ "ID", "Version", "Category", "Title", "Description", "Facility", "UseParentFDS", "LocalFDS", "FDSStartDelay", "UseParentDaylight", "DaylightTime", "Timeout", "Evaluations", "XREvents" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FireXR.Protobuf.CombinedScenario), global::FireXR.Protobuf.CombinedScenario.Parser, new[]{ "ID", "Version", "Title", "Description", "Facility", "FDS", "FDSStartDelay", "DaylightTime", "Scenarios" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum FacilityType {
    [pbr::OriginalName("Global")] Global = 0,
    [pbr::OriginalName("MultiUseFacility")] MultiUseFacility = 1,
    [pbr::OriginalName("ComplexFacility")] ComplexFacility = 2,
    [pbr::OriginalName("ElderlyFacility")] ElderlyFacility = 3,
    [pbr::OriginalName("UndergroundFacility")] UndergroundFacility = 4,
  }

  public enum TransformType {
    [pbr::OriginalName("POSITION")] Position = 0,
    [pbr::OriginalName("SCALA")] Scala = 1,
  }

  public enum XREventType {
    [pbr::OriginalName("Event")] Event = 0,
    [pbr::OriginalName("Listener")] Listener = 1,
  }

  public enum CategoryType {
    /// <summary>
    /// 해당없음
    /// </summary>
    [pbr::OriginalName("None")] None = 0,
    /// <summary>
    /// 초기소화
    /// </summary>
    [pbr::OriginalName("EarlyExtinction")] EarlyExtinction = 1,
    /// <summary>
    /// 화재인지
    /// </summary>
    [pbr::OriginalName("FireRecognition")] FireRecognition = 2,
    /// <summary>
    /// 화재전파
    /// </summary>
    [pbr::OriginalName("FireNotification")] FireNotification = 3,
    /// <summary>
    /// 피난유도
    /// </summary>
    [pbr::OriginalName("EvacuationGuidance")] EvacuationGuidance = 4,
    /// <summary>
    /// 소방시설
    /// </summary>
    [pbr::OriginalName("FireFacility")] FireFacility = 5,
    /// <summary>
    /// 소방대협업
    /// </summary>
    [pbr::OriginalName("FireCoworking")] FireCoworking = 6,
    /// <summary>
    /// 119신고
    /// </summary>
    [pbr::OriginalName("FireCalling")] FireCalling = 7,
    [pbr::OriginalName("SuddenEvent")] SuddenEvent = 8,
  }

  #endregion

  #region Messages
  public sealed partial class Transform : pb::IMessage<Transform>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Transform> _parser = new pb::MessageParser<Transform>(() => new Transform());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transform> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FireXR.Protobuf.FirexrScenarioReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform(Transform other) : this() {
      iD_ = other.iD_;
      type_ = other.type_;
      name_ = other.name_;
      positionX_ = other.positionX_;
      positionY_ = other.positionY_;
      positionZ_ = other.positionZ_;
      rotationX_ = other.rotationX_;
      rotationY_ = other.rotationY_;
      rotationZ_ = other.rotationZ_;
      scaleX_ = other.scaleX_;
      scaleY_ = other.scaleY_;
      scaleZ_ = other.scaleZ_;
      desc_ = other.desc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform Clone() {
      return new Transform(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private uint iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::FireXR.Protobuf.TransformType type_ = global::FireXR.Protobuf.TransformType.Position;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FireXR.Protobuf.TransformType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PositionX" field.</summary>
    public const int PositionXFieldNumber = 4;
    private float positionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    /// <summary>Field number for the "PositionY" field.</summary>
    public const int PositionYFieldNumber = 5;
    private float positionY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionY {
      get { return positionY_; }
      set {
        positionY_ = value;
      }
    }

    /// <summary>Field number for the "PositionZ" field.</summary>
    public const int PositionZFieldNumber = 6;
    private float positionZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionZ {
      get { return positionZ_; }
      set {
        positionZ_ = value;
      }
    }

    /// <summary>Field number for the "RotationX" field.</summary>
    public const int RotationXFieldNumber = 7;
    private float rotationX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotationX {
      get { return rotationX_; }
      set {
        rotationX_ = value;
      }
    }

    /// <summary>Field number for the "RotationY" field.</summary>
    public const int RotationYFieldNumber = 8;
    private float rotationY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotationY {
      get { return rotationY_; }
      set {
        rotationY_ = value;
      }
    }

    /// <summary>Field number for the "RotationZ" field.</summary>
    public const int RotationZFieldNumber = 9;
    private float rotationZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotationZ {
      get { return rotationZ_; }
      set {
        rotationZ_ = value;
      }
    }

    /// <summary>Field number for the "ScaleX" field.</summary>
    public const int ScaleXFieldNumber = 10;
    private float scaleX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ScaleX {
      get { return scaleX_; }
      set {
        scaleX_ = value;
      }
    }

    /// <summary>Field number for the "ScaleY" field.</summary>
    public const int ScaleYFieldNumber = 11;
    private float scaleY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ScaleY {
      get { return scaleY_; }
      set {
        scaleY_ = value;
      }
    }

    /// <summary>Field number for the "ScaleZ" field.</summary>
    public const int ScaleZFieldNumber = 12;
    private float scaleZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ScaleZ {
      get { return scaleZ_; }
      set {
        scaleZ_ = value;
      }
    }

    /// <summary>Field number for the "Desc" field.</summary>
    public const int DescFieldNumber = 13;
    private string desc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transform);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transform other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Type != other.Type) return false;
      if (Name != other.Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionX, other.PositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionY, other.PositionY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionZ, other.PositionZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RotationX, other.RotationX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RotationY, other.RotationY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RotationZ, other.RotationZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ScaleX, other.ScaleX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ScaleY, other.ScaleY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ScaleZ, other.ScaleZ)) return false;
      if (Desc != other.Desc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Type != global::FireXR.Protobuf.TransformType.Position) hash ^= Type.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (PositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionX);
      if (PositionY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionY);
      if (PositionZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionZ);
      if (RotationX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RotationX);
      if (RotationY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RotationY);
      if (RotationZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RotationZ);
      if (ScaleX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ScaleX);
      if (ScaleY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ScaleY);
      if (ScaleZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ScaleZ);
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ID);
      }
      if (Type != global::FireXR.Protobuf.TransformType.Position) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (PositionX != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PositionX);
      }
      if (PositionY != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PositionY);
      }
      if (PositionZ != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(PositionZ);
      }
      if (RotationX != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(RotationX);
      }
      if (RotationY != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(RotationY);
      }
      if (RotationZ != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(RotationZ);
      }
      if (ScaleX != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(ScaleX);
      }
      if (ScaleY != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(ScaleY);
      }
      if (ScaleZ != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(ScaleZ);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Desc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ID);
      }
      if (Type != global::FireXR.Protobuf.TransformType.Position) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (PositionX != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PositionX);
      }
      if (PositionY != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PositionY);
      }
      if (PositionZ != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(PositionZ);
      }
      if (RotationX != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(RotationX);
      }
      if (RotationY != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(RotationY);
      }
      if (RotationZ != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(RotationZ);
      }
      if (ScaleX != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(ScaleX);
      }
      if (ScaleY != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(ScaleY);
      }
      if (ScaleZ != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(ScaleZ);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Desc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ID);
      }
      if (Type != global::FireXR.Protobuf.TransformType.Position) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (PositionX != 0F) {
        size += 1 + 4;
      }
      if (PositionY != 0F) {
        size += 1 + 4;
      }
      if (PositionZ != 0F) {
        size += 1 + 4;
      }
      if (RotationX != 0F) {
        size += 1 + 4;
      }
      if (RotationY != 0F) {
        size += 1 + 4;
      }
      if (RotationZ != 0F) {
        size += 1 + 4;
      }
      if (ScaleX != 0F) {
        size += 1 + 4;
      }
      if (ScaleY != 0F) {
        size += 1 + 4;
      }
      if (ScaleZ != 0F) {
        size += 1 + 4;
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transform other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Type != global::FireXR.Protobuf.TransformType.Position) {
        Type = other.Type;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.PositionX != 0F) {
        PositionX = other.PositionX;
      }
      if (other.PositionY != 0F) {
        PositionY = other.PositionY;
      }
      if (other.PositionZ != 0F) {
        PositionZ = other.PositionZ;
      }
      if (other.RotationX != 0F) {
        RotationX = other.RotationX;
      }
      if (other.RotationY != 0F) {
        RotationY = other.RotationY;
      }
      if (other.RotationZ != 0F) {
        RotationZ = other.RotationZ;
      }
      if (other.ScaleX != 0F) {
        ScaleX = other.ScaleX;
      }
      if (other.ScaleY != 0F) {
        ScaleY = other.ScaleY;
      }
      if (other.ScaleZ != 0F) {
        ScaleZ = other.ScaleZ;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadUInt32();
            break;
          }
          case 16: {
            Type = (global::FireXR.Protobuf.TransformType) input.ReadEnum();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 37: {
            PositionX = input.ReadFloat();
            break;
          }
          case 45: {
            PositionY = input.ReadFloat();
            break;
          }
          case 53: {
            PositionZ = input.ReadFloat();
            break;
          }
          case 61: {
            RotationX = input.ReadFloat();
            break;
          }
          case 69: {
            RotationY = input.ReadFloat();
            break;
          }
          case 77: {
            RotationZ = input.ReadFloat();
            break;
          }
          case 85: {
            ScaleX = input.ReadFloat();
            break;
          }
          case 93: {
            ScaleY = input.ReadFloat();
            break;
          }
          case 101: {
            ScaleZ = input.ReadFloat();
            break;
          }
          case 106: {
            Desc = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ID = input.ReadUInt32();
            break;
          }
          case 16: {
            Type = (global::FireXR.Protobuf.TransformType) input.ReadEnum();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 37: {
            PositionX = input.ReadFloat();
            break;
          }
          case 45: {
            PositionY = input.ReadFloat();
            break;
          }
          case 53: {
            PositionZ = input.ReadFloat();
            break;
          }
          case 61: {
            RotationX = input.ReadFloat();
            break;
          }
          case 69: {
            RotationY = input.ReadFloat();
            break;
          }
          case 77: {
            RotationZ = input.ReadFloat();
            break;
          }
          case 85: {
            ScaleX = input.ReadFloat();
            break;
          }
          case 93: {
            ScaleY = input.ReadFloat();
            break;
          }
          case 101: {
            ScaleZ = input.ReadFloat();
            break;
          }
          case 106: {
            Desc = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class InteractionPoint : pb::IMessage<InteractionPoint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InteractionPoint> _parser = new pb::MessageParser<InteractionPoint>(() => new InteractionPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FireXR.Protobuf.FirexrScenarioReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionPoint(InteractionPoint other) : this() {
      iD_ = other.iD_;
      facility_ = other.facility_;
      type_ = other.type_;
      localTransform_ = other.localTransform_;
      contents_ = other.contents_;
      desc_ = other.desc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionPoint Clone() {
      return new InteractionPoint(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private uint iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Facility" field.</summary>
    public const int FacilityFieldNumber = 2;
    private global::FireXR.Protobuf.FacilityType facility_ = global::FireXR.Protobuf.FacilityType.Global;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FireXR.Protobuf.FacilityType Facility {
      get { return facility_; }
      set {
        facility_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 3;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LocalTransform" field.</summary>
    public const int LocalTransformFieldNumber = 4;
    private uint localTransform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LocalTransform {
      get { return localTransform_; }
      set {
        localTransform_ = value;
      }
    }

    /// <summary>Field number for the "Contents" field.</summary>
    public const int ContentsFieldNumber = 5;
    private string contents_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Contents {
      get { return contents_; }
      set {
        contents_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Desc" field.</summary>
    public const int DescFieldNumber = 6;
    private string desc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Facility != other.Facility) return false;
      if (Type != other.Type) return false;
      if (LocalTransform != other.LocalTransform) return false;
      if (Contents != other.Contents) return false;
      if (Desc != other.Desc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Facility != global::FireXR.Protobuf.FacilityType.Global) hash ^= Facility.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (LocalTransform != 0) hash ^= LocalTransform.GetHashCode();
      if (Contents.Length != 0) hash ^= Contents.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ID);
      }
      if (Facility != global::FireXR.Protobuf.FacilityType.Global) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Facility);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Type);
      }
      if (LocalTransform != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(LocalTransform);
      }
      if (Contents.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Contents);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Desc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ID);
      }
      if (Facility != global::FireXR.Protobuf.FacilityType.Global) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Facility);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Type);
      }
      if (LocalTransform != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(LocalTransform);
      }
      if (Contents.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Contents);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Desc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ID);
      }
      if (Facility != global::FireXR.Protobuf.FacilityType.Global) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Facility);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (LocalTransform != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LocalTransform);
      }
      if (Contents.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Contents);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionPoint other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Facility != global::FireXR.Protobuf.FacilityType.Global) {
        Facility = other.Facility;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.LocalTransform != 0) {
        LocalTransform = other.LocalTransform;
      }
      if (other.Contents.Length != 0) {
        Contents = other.Contents;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadUInt32();
            break;
          }
          case 16: {
            Facility = (global::FireXR.Protobuf.FacilityType) input.ReadEnum();
            break;
          }
          case 26: {
            Type = input.ReadString();
            break;
          }
          case 32: {
            LocalTransform = input.ReadUInt32();
            break;
          }
          case 42: {
            Contents = input.ReadString();
            break;
          }
          case 50: {
            Desc = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ID = input.ReadUInt32();
            break;
          }
          case 16: {
            Facility = (global::FireXR.Protobuf.FacilityType) input.ReadEnum();
            break;
          }
          case 26: {
            Type = input.ReadString();
            break;
          }
          case 32: {
            LocalTransform = input.ReadUInt32();
            break;
          }
          case 42: {
            Contents = input.ReadString();
            break;
          }
          case 50: {
            Desc = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CutScene : pb::IMessage<CutScene>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CutScene> _parser = new pb::MessageParser<CutScene>(() => new CutScene());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CutScene> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FireXR.Protobuf.FirexrScenarioReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CutScene() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CutScene(CutScene other) : this() {
      iD_ = other.iD_;
      type_ = other.type_;
      fileName_ = other.fileName_;
      desc_ = other.desc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CutScene Clone() {
      return new CutScene(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private uint iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FileName" field.</summary>
    public const int FileNameFieldNumber = 3;
    private string fileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Desc" field.</summary>
    public const int DescFieldNumber = 4;
    private string desc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CutScene);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CutScene other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Type != other.Type) return false;
      if (FileName != other.FileName) return false;
      if (Desc != other.Desc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ID);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FileName);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Desc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ID);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FileName);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Desc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ID);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CutScene other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadUInt32();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            FileName = input.ReadString();
            break;
          }
          case 34: {
            Desc = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ID = input.ReadUInt32();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            FileName = input.ReadString();
            break;
          }
          case 34: {
            Desc = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ObjectInfo : pb::IMessage<ObjectInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ObjectInfo> _parser = new pb::MessageParser<ObjectInfo>(() => new ObjectInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FireXR.Protobuf.FirexrScenarioReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectInfo(ObjectInfo other) : this() {
      iD_ = other.iD_;
      name_ = other.name_;
      facility_ = other.facility_;
      type_ = other.type_;
      fileName_ = other.fileName_;
      activatedEventDelay_ = other.activatedEventDelay_;
      activateObjects_ = other.activateObjects_.Clone();
      deactivateObjects_ = other.deactivateObjects_.Clone();
      desc_ = other.desc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectInfo Clone() {
      return new ObjectInfo(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private uint iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Facility" field.</summary>
    public const int FacilityFieldNumber = 3;
    private global::FireXR.Protobuf.FacilityType facility_ = global::FireXR.Protobuf.FacilityType.Global;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FireXR.Protobuf.FacilityType Facility {
      get { return facility_; }
      set {
        facility_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 4;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FileName" field.</summary>
    public const int FileNameFieldNumber = 5;
    private string fileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ActivatedEventDelay" field.</summary>
    public const int ActivatedEventDelayFieldNumber = 6;
    private float activatedEventDelay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ActivatedEventDelay {
      get { return activatedEventDelay_; }
      set {
        activatedEventDelay_ = value;
      }
    }

    /// <summary>Field number for the "ActivateObjects" field.</summary>
    public const int ActivateObjectsFieldNumber = 7;
    private static readonly pb::FieldCodec<uint> _repeated_activateObjects_codec
        = pb::FieldCodec.ForUInt32(58);
    private readonly pbc::RepeatedField<uint> activateObjects_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ActivateObjects {
      get { return activateObjects_; }
    }

    /// <summary>Field number for the "DeactivateObjects" field.</summary>
    public const int DeactivateObjectsFieldNumber = 8;
    private static readonly pb::FieldCodec<uint> _repeated_deactivateObjects_codec
        = pb::FieldCodec.ForUInt32(66);
    private readonly pbc::RepeatedField<uint> deactivateObjects_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> DeactivateObjects {
      get { return deactivateObjects_; }
    }

    /// <summary>Field number for the "Desc" field.</summary>
    public const int DescFieldNumber = 9;
    private string desc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Name != other.Name) return false;
      if (Facility != other.Facility) return false;
      if (Type != other.Type) return false;
      if (FileName != other.FileName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ActivatedEventDelay, other.ActivatedEventDelay)) return false;
      if(!activateObjects_.Equals(other.activateObjects_)) return false;
      if(!deactivateObjects_.Equals(other.deactivateObjects_)) return false;
      if (Desc != other.Desc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Facility != global::FireXR.Protobuf.FacilityType.Global) hash ^= Facility.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (ActivatedEventDelay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ActivatedEventDelay);
      hash ^= activateObjects_.GetHashCode();
      hash ^= deactivateObjects_.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Facility != global::FireXR.Protobuf.FacilityType.Global) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Facility);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Type);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FileName);
      }
      if (ActivatedEventDelay != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(ActivatedEventDelay);
      }
      activateObjects_.WriteTo(output, _repeated_activateObjects_codec);
      deactivateObjects_.WriteTo(output, _repeated_deactivateObjects_codec);
      if (Desc.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Desc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Facility != global::FireXR.Protobuf.FacilityType.Global) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Facility);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Type);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FileName);
      }
      if (ActivatedEventDelay != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(ActivatedEventDelay);
      }
      activateObjects_.WriteTo(ref output, _repeated_activateObjects_codec);
      deactivateObjects_.WriteTo(ref output, _repeated_deactivateObjects_codec);
      if (Desc.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Desc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Facility != global::FireXR.Protobuf.FacilityType.Global) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Facility);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (ActivatedEventDelay != 0F) {
        size += 1 + 4;
      }
      size += activateObjects_.CalculateSize(_repeated_activateObjects_codec);
      size += deactivateObjects_.CalculateSize(_repeated_deactivateObjects_codec);
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectInfo other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Facility != global::FireXR.Protobuf.FacilityType.Global) {
        Facility = other.Facility;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      if (other.ActivatedEventDelay != 0F) {
        ActivatedEventDelay = other.ActivatedEventDelay;
      }
      activateObjects_.Add(other.activateObjects_);
      deactivateObjects_.Add(other.deactivateObjects_);
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Facility = (global::FireXR.Protobuf.FacilityType) input.ReadEnum();
            break;
          }
          case 34: {
            Type = input.ReadString();
            break;
          }
          case 42: {
            FileName = input.ReadString();
            break;
          }
          case 53: {
            ActivatedEventDelay = input.ReadFloat();
            break;
          }
          case 58:
          case 56: {
            activateObjects_.AddEntriesFrom(input, _repeated_activateObjects_codec);
            break;
          }
          case 66:
          case 64: {
            deactivateObjects_.AddEntriesFrom(input, _repeated_deactivateObjects_codec);
            break;
          }
          case 74: {
            Desc = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ID = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Facility = (global::FireXR.Protobuf.FacilityType) input.ReadEnum();
            break;
          }
          case 34: {
            Type = input.ReadString();
            break;
          }
          case 42: {
            FileName = input.ReadString();
            break;
          }
          case 53: {
            ActivatedEventDelay = input.ReadFloat();
            break;
          }
          case 58:
          case 56: {
            activateObjects_.AddEntriesFrom(ref input, _repeated_activateObjects_codec);
            break;
          }
          case 66:
          case 64: {
            deactivateObjects_.AddEntriesFrom(ref input, _repeated_deactivateObjects_codec);
            break;
          }
          case 74: {
            Desc = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Sound : pb::IMessage<Sound>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Sound> _parser = new pb::MessageParser<Sound>(() => new Sound());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Sound> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FireXR.Protobuf.FirexrScenarioReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sound() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sound(Sound other) : this() {
      iD_ = other.iD_;
      type_ = other.type_;
      fileName_ = other.fileName_;
      loopingUse_ = other.loopingUse_;
      desc_ = other.desc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sound Clone() {
      return new Sound(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private uint iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FileName" field.</summary>
    public const int FileNameFieldNumber = 3;
    private string fileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LoopingUse" field.</summary>
    public const int LoopingUseFieldNumber = 4;
    private int loopingUse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoopingUse {
      get { return loopingUse_; }
      set {
        loopingUse_ = value;
      }
    }

    /// <summary>Field number for the "Desc" field.</summary>
    public const int DescFieldNumber = 5;
    private string desc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Sound);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Sound other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Type != other.Type) return false;
      if (FileName != other.FileName) return false;
      if (LoopingUse != other.LoopingUse) return false;
      if (Desc != other.Desc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (LoopingUse != 0) hash ^= LoopingUse.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ID);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FileName);
      }
      if (LoopingUse != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LoopingUse);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Desc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ID);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FileName);
      }
      if (LoopingUse != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LoopingUse);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Desc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ID);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (LoopingUse != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoopingUse);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Sound other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      if (other.LoopingUse != 0) {
        LoopingUse = other.LoopingUse;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadUInt32();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            FileName = input.ReadString();
            break;
          }
          case 32: {
            LoopingUse = input.ReadInt32();
            break;
          }
          case 42: {
            Desc = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ID = input.ReadUInt32();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            FileName = input.ReadString();
            break;
          }
          case 32: {
            LoopingUse = input.ReadInt32();
            break;
          }
          case 42: {
            Desc = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FDSFile : pb::IMessage<FDSFile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FDSFile> _parser = new pb::MessageParser<FDSFile>(() => new FDSFile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FDSFile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FireXR.Protobuf.FirexrScenarioReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FDSFile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FDSFile(FDSFile other) : this() {
      iD_ = other.iD_;
      version_ = other.version_;
      dataType_ = other.dataType_;
      deviceType_ = other.deviceType_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      fileName_ = other.fileName_;
      desc_ = other.desc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FDSFile Clone() {
      return new FDSFile(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private uint iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 2;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "DataType" field.</summary>
    public const int DataTypeFieldNumber = 3;
    private string dataType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataType {
      get { return dataType_; }
      set {
        dataType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DeviceType" field.</summary>
    public const int DeviceTypeFieldNumber = 4;
    private string deviceType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceType {
      get { return deviceType_; }
      set {
        deviceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StartTime" field.</summary>
    public const int StartTimeFieldNumber = 5;
    private float startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "EndTime" field.</summary>
    public const int EndTimeFieldNumber = 6;
    private float endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "FileName" field.</summary>
    public const int FileNameFieldNumber = 7;
    private string fileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Desc" field.</summary>
    public const int DescFieldNumber = 8;
    private string desc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FDSFile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FDSFile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Version != other.Version) return false;
      if (DataType != other.DataType) return false;
      if (DeviceType != other.DeviceType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StartTime, other.StartTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EndTime, other.EndTime)) return false;
      if (FileName != other.FileName) return false;
      if (Desc != other.Desc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (DataType.Length != 0) hash ^= DataType.GetHashCode();
      if (DeviceType.Length != 0) hash ^= DeviceType.GetHashCode();
      if (StartTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StartTime);
      if (EndTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EndTime);
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ID);
      }
      if (Version != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Version);
      }
      if (DataType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DataType);
      }
      if (DeviceType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DeviceType);
      }
      if (StartTime != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(StartTime);
      }
      if (EndTime != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(EndTime);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(FileName);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Desc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ID);
      }
      if (Version != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Version);
      }
      if (DataType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DataType);
      }
      if (DeviceType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DeviceType);
      }
      if (StartTime != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(StartTime);
      }
      if (EndTime != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(EndTime);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(FileName);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Desc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ID);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (DataType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataType);
      }
      if (DeviceType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceType);
      }
      if (StartTime != 0F) {
        size += 1 + 4;
      }
      if (EndTime != 0F) {
        size += 1 + 4;
      }
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FDSFile other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.DataType.Length != 0) {
        DataType = other.DataType;
      }
      if (other.DeviceType.Length != 0) {
        DeviceType = other.DeviceType;
      }
      if (other.StartTime != 0F) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0F) {
        EndTime = other.EndTime;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadUInt32();
            break;
          }
          case 16: {
            Version = input.ReadInt32();
            break;
          }
          case 26: {
            DataType = input.ReadString();
            break;
          }
          case 34: {
            DeviceType = input.ReadString();
            break;
          }
          case 45: {
            StartTime = input.ReadFloat();
            break;
          }
          case 53: {
            EndTime = input.ReadFloat();
            break;
          }
          case 58: {
            FileName = input.ReadString();
            break;
          }
          case 66: {
            Desc = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ID = input.ReadUInt32();
            break;
          }
          case 16: {
            Version = input.ReadInt32();
            break;
          }
          case 26: {
            DataType = input.ReadString();
            break;
          }
          case 34: {
            DeviceType = input.ReadString();
            break;
          }
          case 45: {
            StartTime = input.ReadFloat();
            break;
          }
          case 53: {
            EndTime = input.ReadFloat();
            break;
          }
          case 58: {
            FileName = input.ReadString();
            break;
          }
          case 66: {
            Desc = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FDS : pb::IMessage<FDS>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FDS> _parser = new pb::MessageParser<FDS>(() => new FDS());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FDS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FireXR.Protobuf.FirexrScenarioReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FDS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FDS(FDS other) : this() {
      iD_ = other.iD_;
      facility_ = other.facility_;
      fDSFiles_ = other.fDSFiles_.Clone();
      desc_ = other.desc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FDS Clone() {
      return new FDS(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private uint iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Facility" field.</summary>
    public const int FacilityFieldNumber = 2;
    private global::FireXR.Protobuf.FacilityType facility_ = global::FireXR.Protobuf.FacilityType.Global;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FireXR.Protobuf.FacilityType Facility {
      get { return facility_; }
      set {
        facility_ = value;
      }
    }

    /// <summary>Field number for the "FDSFiles" field.</summary>
    public const int FDSFilesFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_fDSFiles_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> fDSFiles_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> FDSFiles {
      get { return fDSFiles_; }
    }

    /// <summary>Field number for the "Desc" field.</summary>
    public const int DescFieldNumber = 4;
    private string desc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FDS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FDS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Facility != other.Facility) return false;
      if(!fDSFiles_.Equals(other.fDSFiles_)) return false;
      if (Desc != other.Desc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Facility != global::FireXR.Protobuf.FacilityType.Global) hash ^= Facility.GetHashCode();
      hash ^= fDSFiles_.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ID);
      }
      if (Facility != global::FireXR.Protobuf.FacilityType.Global) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Facility);
      }
      fDSFiles_.WriteTo(output, _repeated_fDSFiles_codec);
      if (Desc.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Desc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ID);
      }
      if (Facility != global::FireXR.Protobuf.FacilityType.Global) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Facility);
      }
      fDSFiles_.WriteTo(ref output, _repeated_fDSFiles_codec);
      if (Desc.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Desc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ID);
      }
      if (Facility != global::FireXR.Protobuf.FacilityType.Global) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Facility);
      }
      size += fDSFiles_.CalculateSize(_repeated_fDSFiles_codec);
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FDS other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Facility != global::FireXR.Protobuf.FacilityType.Global) {
        Facility = other.Facility;
      }
      fDSFiles_.Add(other.fDSFiles_);
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadUInt32();
            break;
          }
          case 16: {
            Facility = (global::FireXR.Protobuf.FacilityType) input.ReadEnum();
            break;
          }
          case 26:
          case 24: {
            fDSFiles_.AddEntriesFrom(input, _repeated_fDSFiles_codec);
            break;
          }
          case 34: {
            Desc = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ID = input.ReadUInt32();
            break;
          }
          case 16: {
            Facility = (global::FireXR.Protobuf.FacilityType) input.ReadEnum();
            break;
          }
          case 26:
          case 24: {
            fDSFiles_.AddEntriesFrom(ref input, _repeated_fDSFiles_codec);
            break;
          }
          case 34: {
            Desc = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class XREvent : pb::IMessage<XREvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<XREvent> _parser = new pb::MessageParser<XREvent>(() => new XREvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<XREvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FireXR.Protobuf.FirexrScenarioReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XREvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XREvent(XREvent other) : this() {
      iD_ = other.iD_;
      type_ = other.type_;
      action_ = other.action_;
      target_ = other.target_;
      contents_ = other.contents_;
      startDelay_ = other.startDelay_;
      nextDelay_ = other.nextDelay_;
      nextID_ = other.nextID_;
      desc_ = other.desc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XREvent Clone() {
      return new XREvent(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private uint iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::FireXR.Protobuf.XREventType type_ = global::FireXR.Protobuf.XREventType.Event;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FireXR.Protobuf.XREventType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Action" field.</summary>
    public const int ActionFieldNumber = 3;
    private string action_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Action {
      get { return action_; }
      set {
        action_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Target" field.</summary>
    public const int TargetFieldNumber = 4;
    private string target_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Target {
      get { return target_; }
      set {
        target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Contents" field.</summary>
    public const int ContentsFieldNumber = 5;
    private string contents_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Contents {
      get { return contents_; }
      set {
        contents_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StartDelay" field.</summary>
    public const int StartDelayFieldNumber = 6;
    private float startDelay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StartDelay {
      get { return startDelay_; }
      set {
        startDelay_ = value;
      }
    }

    /// <summary>Field number for the "NextDelay" field.</summary>
    public const int NextDelayFieldNumber = 7;
    private float nextDelay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NextDelay {
      get { return nextDelay_; }
      set {
        nextDelay_ = value;
      }
    }

    /// <summary>Field number for the "NextID" field.</summary>
    public const int NextIDFieldNumber = 8;
    private uint nextID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NextID {
      get { return nextID_; }
      set {
        nextID_ = value;
      }
    }

    /// <summary>Field number for the "Desc" field.</summary>
    public const int DescFieldNumber = 9;
    private string desc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as XREvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(XREvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Type != other.Type) return false;
      if (Action != other.Action) return false;
      if (Target != other.Target) return false;
      if (Contents != other.Contents) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StartDelay, other.StartDelay)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NextDelay, other.NextDelay)) return false;
      if (NextID != other.NextID) return false;
      if (Desc != other.Desc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Type != global::FireXR.Protobuf.XREventType.Event) hash ^= Type.GetHashCode();
      if (Action.Length != 0) hash ^= Action.GetHashCode();
      if (Target.Length != 0) hash ^= Target.GetHashCode();
      if (Contents.Length != 0) hash ^= Contents.GetHashCode();
      if (StartDelay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StartDelay);
      if (NextDelay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NextDelay);
      if (NextID != 0) hash ^= NextID.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ID);
      }
      if (Type != global::FireXR.Protobuf.XREventType.Event) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Action.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Action);
      }
      if (Target.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Target);
      }
      if (Contents.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Contents);
      }
      if (StartDelay != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(StartDelay);
      }
      if (NextDelay != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(NextDelay);
      }
      if (NextID != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(NextID);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Desc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ID);
      }
      if (Type != global::FireXR.Protobuf.XREventType.Event) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Action.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Action);
      }
      if (Target.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Target);
      }
      if (Contents.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Contents);
      }
      if (StartDelay != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(StartDelay);
      }
      if (NextDelay != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(NextDelay);
      }
      if (NextID != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(NextID);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Desc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ID);
      }
      if (Type != global::FireXR.Protobuf.XREventType.Event) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Action.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Action);
      }
      if (Target.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Target);
      }
      if (Contents.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Contents);
      }
      if (StartDelay != 0F) {
        size += 1 + 4;
      }
      if (NextDelay != 0F) {
        size += 1 + 4;
      }
      if (NextID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NextID);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(XREvent other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Type != global::FireXR.Protobuf.XREventType.Event) {
        Type = other.Type;
      }
      if (other.Action.Length != 0) {
        Action = other.Action;
      }
      if (other.Target.Length != 0) {
        Target = other.Target;
      }
      if (other.Contents.Length != 0) {
        Contents = other.Contents;
      }
      if (other.StartDelay != 0F) {
        StartDelay = other.StartDelay;
      }
      if (other.NextDelay != 0F) {
        NextDelay = other.NextDelay;
      }
      if (other.NextID != 0) {
        NextID = other.NextID;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadUInt32();
            break;
          }
          case 16: {
            Type = (global::FireXR.Protobuf.XREventType) input.ReadEnum();
            break;
          }
          case 26: {
            Action = input.ReadString();
            break;
          }
          case 34: {
            Target = input.ReadString();
            break;
          }
          case 42: {
            Contents = input.ReadString();
            break;
          }
          case 53: {
            StartDelay = input.ReadFloat();
            break;
          }
          case 61: {
            NextDelay = input.ReadFloat();
            break;
          }
          case 64: {
            NextID = input.ReadUInt32();
            break;
          }
          case 74: {
            Desc = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ID = input.ReadUInt32();
            break;
          }
          case 16: {
            Type = (global::FireXR.Protobuf.XREventType) input.ReadEnum();
            break;
          }
          case 26: {
            Action = input.ReadString();
            break;
          }
          case 34: {
            Target = input.ReadString();
            break;
          }
          case 42: {
            Contents = input.ReadString();
            break;
          }
          case 53: {
            StartDelay = input.ReadFloat();
            break;
          }
          case 61: {
            NextDelay = input.ReadFloat();
            break;
          }
          case 64: {
            NextID = input.ReadUInt32();
            break;
          }
          case 74: {
            Desc = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EvaluationAction : pb::IMessage<EvaluationAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EvaluationAction> _parser = new pb::MessageParser<EvaluationAction>(() => new EvaluationAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EvaluationAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FireXR.Protobuf.FirexrScenarioReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvaluationAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvaluationAction(EvaluationAction other) : this() {
      iD_ = other.iD_;
      action_ = other.action_;
      desc_ = other.desc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvaluationAction Clone() {
      return new EvaluationAction(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private uint iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Action" field.</summary>
    public const int ActionFieldNumber = 2;
    private string action_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Action {
      get { return action_; }
      set {
        action_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Desc" field.</summary>
    public const int DescFieldNumber = 3;
    private string desc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EvaluationAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EvaluationAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Action != other.Action) return false;
      if (Desc != other.Desc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Action.Length != 0) hash ^= Action.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ID);
      }
      if (Action.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Action);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Desc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ID);
      }
      if (Action.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Action);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Desc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ID);
      }
      if (Action.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Action);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EvaluationAction other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Action.Length != 0) {
        Action = other.Action;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadUInt32();
            break;
          }
          case 18: {
            Action = input.ReadString();
            break;
          }
          case 26: {
            Desc = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ID = input.ReadUInt32();
            break;
          }
          case 18: {
            Action = input.ReadString();
            break;
          }
          case 26: {
            Desc = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Evaluation : pb::IMessage<Evaluation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Evaluation> _parser = new pb::MessageParser<Evaluation>(() => new Evaluation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Evaluation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FireXR.Protobuf.FirexrScenarioReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Evaluation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Evaluation(Evaluation other) : this() {
      iD_ = other.iD_;
      category_ = other.category_;
      action_ = other.action_;
      weight_ = other.weight_;
      score_ = other.score_;
      type_ = other.type_;
      contents_ = other.contents_;
      evaluationActions_ = other.evaluationActions_.Clone();
      desc_ = other.desc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Evaluation Clone() {
      return new Evaluation(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private uint iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Category" field.</summary>
    public const int CategoryFieldNumber = 2;
    private string category_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Category {
      get { return category_; }
      set {
        category_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Action" field.</summary>
    public const int ActionFieldNumber = 3;
    private string action_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Action {
      get { return action_; }
      set {
        action_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Weight" field.</summary>
    public const int WeightFieldNumber = 4;
    private float weight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    /// <summary>Field number for the "Score" field.</summary>
    public const int ScoreFieldNumber = 5;
    private float score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 6;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Contents" field.</summary>
    public const int ContentsFieldNumber = 7;
    private string contents_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Contents {
      get { return contents_; }
      set {
        contents_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EvaluationActions" field.</summary>
    public const int EvaluationActionsFieldNumber = 8;
    private static readonly pb::FieldCodec<uint> _repeated_evaluationActions_codec
        = pb::FieldCodec.ForUInt32(66);
    private readonly pbc::RepeatedField<uint> evaluationActions_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> EvaluationActions {
      get { return evaluationActions_; }
    }

    /// <summary>Field number for the "Desc" field.</summary>
    public const int DescFieldNumber = 9;
    private string desc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Evaluation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Evaluation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Category != other.Category) return false;
      if (Action != other.Action) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Weight, other.Weight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Score, other.Score)) return false;
      if (Type != other.Type) return false;
      if (Contents != other.Contents) return false;
      if(!evaluationActions_.Equals(other.evaluationActions_)) return false;
      if (Desc != other.Desc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Category.Length != 0) hash ^= Category.GetHashCode();
      if (Action.Length != 0) hash ^= Action.GetHashCode();
      if (Weight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Weight);
      if (Score != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Score);
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Contents.Length != 0) hash ^= Contents.GetHashCode();
      hash ^= evaluationActions_.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ID);
      }
      if (Category.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Category);
      }
      if (Action.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Action);
      }
      if (Weight != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Weight);
      }
      if (Score != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Score);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Type);
      }
      if (Contents.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Contents);
      }
      evaluationActions_.WriteTo(output, _repeated_evaluationActions_codec);
      if (Desc.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Desc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ID);
      }
      if (Category.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Category);
      }
      if (Action.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Action);
      }
      if (Weight != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Weight);
      }
      if (Score != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Score);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Type);
      }
      if (Contents.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Contents);
      }
      evaluationActions_.WriteTo(ref output, _repeated_evaluationActions_codec);
      if (Desc.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Desc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ID);
      }
      if (Category.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Category);
      }
      if (Action.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Action);
      }
      if (Weight != 0F) {
        size += 1 + 4;
      }
      if (Score != 0F) {
        size += 1 + 4;
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Contents.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Contents);
      }
      size += evaluationActions_.CalculateSize(_repeated_evaluationActions_codec);
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Evaluation other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Category.Length != 0) {
        Category = other.Category;
      }
      if (other.Action.Length != 0) {
        Action = other.Action;
      }
      if (other.Weight != 0F) {
        Weight = other.Weight;
      }
      if (other.Score != 0F) {
        Score = other.Score;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Contents.Length != 0) {
        Contents = other.Contents;
      }
      evaluationActions_.Add(other.evaluationActions_);
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadUInt32();
            break;
          }
          case 18: {
            Category = input.ReadString();
            break;
          }
          case 26: {
            Action = input.ReadString();
            break;
          }
          case 37: {
            Weight = input.ReadFloat();
            break;
          }
          case 45: {
            Score = input.ReadFloat();
            break;
          }
          case 50: {
            Type = input.ReadString();
            break;
          }
          case 58: {
            Contents = input.ReadString();
            break;
          }
          case 66:
          case 64: {
            evaluationActions_.AddEntriesFrom(input, _repeated_evaluationActions_codec);
            break;
          }
          case 74: {
            Desc = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ID = input.ReadUInt32();
            break;
          }
          case 18: {
            Category = input.ReadString();
            break;
          }
          case 26: {
            Action = input.ReadString();
            break;
          }
          case 37: {
            Weight = input.ReadFloat();
            break;
          }
          case 45: {
            Score = input.ReadFloat();
            break;
          }
          case 50: {
            Type = input.ReadString();
            break;
          }
          case 58: {
            Contents = input.ReadString();
            break;
          }
          case 66:
          case 64: {
            evaluationActions_.AddEntriesFrom(ref input, _repeated_evaluationActions_codec);
            break;
          }
          case 74: {
            Desc = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SeparatedScenario : pb::IMessage<SeparatedScenario>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SeparatedScenario> _parser = new pb::MessageParser<SeparatedScenario>(() => new SeparatedScenario());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SeparatedScenario> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FireXR.Protobuf.FirexrScenarioReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SeparatedScenario() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SeparatedScenario(SeparatedScenario other) : this() {
      iD_ = other.iD_;
      version_ = other.version_;
      category_ = other.category_.Clone();
      title_ = other.title_;
      description_ = other.description_;
      facility_ = other.facility_;
      useParentFDS_ = other.useParentFDS_;
      localFDS_ = other.localFDS_ != null ? other.localFDS_.Clone() : null;
      fDSStartDelay_ = other.fDSStartDelay_;
      useParentDaylight_ = other.useParentDaylight_;
      daylightTime_ = other.daylightTime_;
      timeout_ = other.timeout_;
      evaluations_ = other.evaluations_.Clone();
      xREvents_ = other.xREvents_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SeparatedScenario Clone() {
      return new SeparatedScenario(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private uint iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 2;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "Category" field.</summary>
    public const int CategoryFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_category_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> category_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Category {
      get { return category_; }
    }

    /// <summary>Field number for the "Title" field.</summary>
    public const int TitleFieldNumber = 4;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Facility" field.</summary>
    public const int FacilityFieldNumber = 6;
    private global::FireXR.Protobuf.FacilityType facility_ = global::FireXR.Protobuf.FacilityType.Global;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FireXR.Protobuf.FacilityType Facility {
      get { return facility_; }
      set {
        facility_ = value;
      }
    }

    /// <summary>Field number for the "UseParentFDS" field.</summary>
    public const int UseParentFDSFieldNumber = 7;
    private int useParentFDS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UseParentFDS {
      get { return useParentFDS_; }
      set {
        useParentFDS_ = value;
      }
    }

    /// <summary>Field number for the "LocalFDS" field.</summary>
    public const int LocalFDSFieldNumber = 8;
    private global::FireXR.Protobuf.FDS localFDS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FireXR.Protobuf.FDS LocalFDS {
      get { return localFDS_; }
      set {
        localFDS_ = value;
      }
    }

    /// <summary>Field number for the "FDSStartDelay" field.</summary>
    public const int FDSStartDelayFieldNumber = 9;
    private float fDSStartDelay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FDSStartDelay {
      get { return fDSStartDelay_; }
      set {
        fDSStartDelay_ = value;
      }
    }

    /// <summary>Field number for the "UseParentDaylight" field.</summary>
    public const int UseParentDaylightFieldNumber = 10;
    private int useParentDaylight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UseParentDaylight {
      get { return useParentDaylight_; }
      set {
        useParentDaylight_ = value;
      }
    }

    /// <summary>Field number for the "DaylightTime" field.</summary>
    public const int DaylightTimeFieldNumber = 11;
    private float daylightTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DaylightTime {
      get { return daylightTime_; }
      set {
        daylightTime_ = value;
      }
    }

    /// <summary>Field number for the "Timeout" field.</summary>
    public const int TimeoutFieldNumber = 12;
    private float timeout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Timeout {
      get { return timeout_; }
      set {
        timeout_ = value;
      }
    }

    /// <summary>Field number for the "Evaluations" field.</summary>
    public const int EvaluationsFieldNumber = 13;
    private static readonly pb::FieldCodec<uint> _repeated_evaluations_codec
        = pb::FieldCodec.ForUInt32(106);
    private readonly pbc::RepeatedField<uint> evaluations_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Evaluations {
      get { return evaluations_; }
    }

    /// <summary>Field number for the "XREvents" field.</summary>
    public const int XREventsFieldNumber = 14;
    private static readonly pb::FieldCodec<uint> _repeated_xREvents_codec
        = pb::FieldCodec.ForUInt32(114);
    private readonly pbc::RepeatedField<uint> xREvents_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> XREvents {
      get { return xREvents_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SeparatedScenario);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SeparatedScenario other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Version != other.Version) return false;
      if(!category_.Equals(other.category_)) return false;
      if (Title != other.Title) return false;
      if (Description != other.Description) return false;
      if (Facility != other.Facility) return false;
      if (UseParentFDS != other.UseParentFDS) return false;
      if (!object.Equals(LocalFDS, other.LocalFDS)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FDSStartDelay, other.FDSStartDelay)) return false;
      if (UseParentDaylight != other.UseParentDaylight) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DaylightTime, other.DaylightTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Timeout, other.Timeout)) return false;
      if(!evaluations_.Equals(other.evaluations_)) return false;
      if(!xREvents_.Equals(other.xREvents_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      hash ^= category_.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Facility != global::FireXR.Protobuf.FacilityType.Global) hash ^= Facility.GetHashCode();
      if (UseParentFDS != 0) hash ^= UseParentFDS.GetHashCode();
      if (localFDS_ != null) hash ^= LocalFDS.GetHashCode();
      if (FDSStartDelay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FDSStartDelay);
      if (UseParentDaylight != 0) hash ^= UseParentDaylight.GetHashCode();
      if (DaylightTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DaylightTime);
      if (Timeout != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Timeout);
      hash ^= evaluations_.GetHashCode();
      hash ^= xREvents_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ID);
      }
      if (Version != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Version);
      }
      category_.WriteTo(output, _repeated_category_codec);
      if (Title.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Title);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      if (Facility != global::FireXR.Protobuf.FacilityType.Global) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Facility);
      }
      if (UseParentFDS != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(UseParentFDS);
      }
      if (localFDS_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(LocalFDS);
      }
      if (FDSStartDelay != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(FDSStartDelay);
      }
      if (UseParentDaylight != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(UseParentDaylight);
      }
      if (DaylightTime != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(DaylightTime);
      }
      if (Timeout != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(Timeout);
      }
      evaluations_.WriteTo(output, _repeated_evaluations_codec);
      xREvents_.WriteTo(output, _repeated_xREvents_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ID);
      }
      if (Version != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Version);
      }
      category_.WriteTo(ref output, _repeated_category_codec);
      if (Title.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Title);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      if (Facility != global::FireXR.Protobuf.FacilityType.Global) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Facility);
      }
      if (UseParentFDS != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(UseParentFDS);
      }
      if (localFDS_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(LocalFDS);
      }
      if (FDSStartDelay != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(FDSStartDelay);
      }
      if (UseParentDaylight != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(UseParentDaylight);
      }
      if (DaylightTime != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(DaylightTime);
      }
      if (Timeout != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(Timeout);
      }
      evaluations_.WriteTo(ref output, _repeated_evaluations_codec);
      xREvents_.WriteTo(ref output, _repeated_xREvents_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ID);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      size += category_.CalculateSize(_repeated_category_codec);
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Facility != global::FireXR.Protobuf.FacilityType.Global) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Facility);
      }
      if (UseParentFDS != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UseParentFDS);
      }
      if (localFDS_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalFDS);
      }
      if (FDSStartDelay != 0F) {
        size += 1 + 4;
      }
      if (UseParentDaylight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UseParentDaylight);
      }
      if (DaylightTime != 0F) {
        size += 1 + 4;
      }
      if (Timeout != 0F) {
        size += 1 + 4;
      }
      size += evaluations_.CalculateSize(_repeated_evaluations_codec);
      size += xREvents_.CalculateSize(_repeated_xREvents_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SeparatedScenario other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      category_.Add(other.category_);
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Facility != global::FireXR.Protobuf.FacilityType.Global) {
        Facility = other.Facility;
      }
      if (other.UseParentFDS != 0) {
        UseParentFDS = other.UseParentFDS;
      }
      if (other.localFDS_ != null) {
        if (localFDS_ == null) {
          LocalFDS = new global::FireXR.Protobuf.FDS();
        }
        LocalFDS.MergeFrom(other.LocalFDS);
      }
      if (other.FDSStartDelay != 0F) {
        FDSStartDelay = other.FDSStartDelay;
      }
      if (other.UseParentDaylight != 0) {
        UseParentDaylight = other.UseParentDaylight;
      }
      if (other.DaylightTime != 0F) {
        DaylightTime = other.DaylightTime;
      }
      if (other.Timeout != 0F) {
        Timeout = other.Timeout;
      }
      evaluations_.Add(other.evaluations_);
      xREvents_.Add(other.xREvents_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadUInt32();
            break;
          }
          case 16: {
            Version = input.ReadInt32();
            break;
          }
          case 26: {
            category_.AddEntriesFrom(input, _repeated_category_codec);
            break;
          }
          case 34: {
            Title = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 48: {
            Facility = (global::FireXR.Protobuf.FacilityType) input.ReadEnum();
            break;
          }
          case 56: {
            UseParentFDS = input.ReadInt32();
            break;
          }
          case 66: {
            if (localFDS_ == null) {
              LocalFDS = new global::FireXR.Protobuf.FDS();
            }
            input.ReadMessage(LocalFDS);
            break;
          }
          case 77: {
            FDSStartDelay = input.ReadFloat();
            break;
          }
          case 80: {
            UseParentDaylight = input.ReadInt32();
            break;
          }
          case 93: {
            DaylightTime = input.ReadFloat();
            break;
          }
          case 101: {
            Timeout = input.ReadFloat();
            break;
          }
          case 106:
          case 104: {
            evaluations_.AddEntriesFrom(input, _repeated_evaluations_codec);
            break;
          }
          case 114:
          case 112: {
            xREvents_.AddEntriesFrom(input, _repeated_xREvents_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ID = input.ReadUInt32();
            break;
          }
          case 16: {
            Version = input.ReadInt32();
            break;
          }
          case 26: {
            category_.AddEntriesFrom(ref input, _repeated_category_codec);
            break;
          }
          case 34: {
            Title = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 48: {
            Facility = (global::FireXR.Protobuf.FacilityType) input.ReadEnum();
            break;
          }
          case 56: {
            UseParentFDS = input.ReadInt32();
            break;
          }
          case 66: {
            if (localFDS_ == null) {
              LocalFDS = new global::FireXR.Protobuf.FDS();
            }
            input.ReadMessage(LocalFDS);
            break;
          }
          case 77: {
            FDSStartDelay = input.ReadFloat();
            break;
          }
          case 80: {
            UseParentDaylight = input.ReadInt32();
            break;
          }
          case 93: {
            DaylightTime = input.ReadFloat();
            break;
          }
          case 101: {
            Timeout = input.ReadFloat();
            break;
          }
          case 106:
          case 104: {
            evaluations_.AddEntriesFrom(ref input, _repeated_evaluations_codec);
            break;
          }
          case 114:
          case 112: {
            xREvents_.AddEntriesFrom(ref input, _repeated_xREvents_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CombinedScenario : pb::IMessage<CombinedScenario>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CombinedScenario> _parser = new pb::MessageParser<CombinedScenario>(() => new CombinedScenario());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CombinedScenario> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FireXR.Protobuf.FirexrScenarioReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombinedScenario() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombinedScenario(CombinedScenario other) : this() {
      iD_ = other.iD_;
      version_ = other.version_;
      title_ = other.title_;
      description_ = other.description_;
      facility_ = other.facility_;
      fDS_ = other.fDS_ != null ? other.fDS_.Clone() : null;
      fDSStartDelay_ = other.fDSStartDelay_;
      daylightTime_ = other.daylightTime_;
      scenarios_ = other.scenarios_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombinedScenario Clone() {
      return new CombinedScenario(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private uint iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 2;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "Title" field.</summary>
    public const int TitleFieldNumber = 3;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Facility" field.</summary>
    public const int FacilityFieldNumber = 5;
    private global::FireXR.Protobuf.FacilityType facility_ = global::FireXR.Protobuf.FacilityType.Global;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FireXR.Protobuf.FacilityType Facility {
      get { return facility_; }
      set {
        facility_ = value;
      }
    }

    /// <summary>Field number for the "FDS" field.</summary>
    public const int FDSFieldNumber = 6;
    private global::FireXR.Protobuf.FDS fDS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FireXR.Protobuf.FDS FDS {
      get { return fDS_; }
      set {
        fDS_ = value;
      }
    }

    /// <summary>Field number for the "FDSStartDelay" field.</summary>
    public const int FDSStartDelayFieldNumber = 7;
    private float fDSStartDelay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FDSStartDelay {
      get { return fDSStartDelay_; }
      set {
        fDSStartDelay_ = value;
      }
    }

    /// <summary>Field number for the "DaylightTime" field.</summary>
    public const int DaylightTimeFieldNumber = 8;
    private float daylightTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DaylightTime {
      get { return daylightTime_; }
      set {
        daylightTime_ = value;
      }
    }

    /// <summary>Field number for the "Scenarios" field.</summary>
    public const int ScenariosFieldNumber = 9;
    private static readonly pb::FieldCodec<uint> _repeated_scenarios_codec
        = pb::FieldCodec.ForUInt32(74);
    private readonly pbc::RepeatedField<uint> scenarios_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Scenarios {
      get { return scenarios_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CombinedScenario);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CombinedScenario other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Version != other.Version) return false;
      if (Title != other.Title) return false;
      if (Description != other.Description) return false;
      if (Facility != other.Facility) return false;
      if (!object.Equals(FDS, other.FDS)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FDSStartDelay, other.FDSStartDelay)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DaylightTime, other.DaylightTime)) return false;
      if(!scenarios_.Equals(other.scenarios_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Facility != global::FireXR.Protobuf.FacilityType.Global) hash ^= Facility.GetHashCode();
      if (fDS_ != null) hash ^= FDS.GetHashCode();
      if (FDSStartDelay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FDSStartDelay);
      if (DaylightTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DaylightTime);
      hash ^= scenarios_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ID);
      }
      if (Version != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Version);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Title);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (Facility != global::FireXR.Protobuf.FacilityType.Global) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Facility);
      }
      if (fDS_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(FDS);
      }
      if (FDSStartDelay != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(FDSStartDelay);
      }
      if (DaylightTime != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(DaylightTime);
      }
      scenarios_.WriteTo(output, _repeated_scenarios_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ID);
      }
      if (Version != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Version);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Title);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (Facility != global::FireXR.Protobuf.FacilityType.Global) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Facility);
      }
      if (fDS_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(FDS);
      }
      if (FDSStartDelay != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(FDSStartDelay);
      }
      if (DaylightTime != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(DaylightTime);
      }
      scenarios_.WriteTo(ref output, _repeated_scenarios_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ID);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Facility != global::FireXR.Protobuf.FacilityType.Global) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Facility);
      }
      if (fDS_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FDS);
      }
      if (FDSStartDelay != 0F) {
        size += 1 + 4;
      }
      if (DaylightTime != 0F) {
        size += 1 + 4;
      }
      size += scenarios_.CalculateSize(_repeated_scenarios_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CombinedScenario other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Facility != global::FireXR.Protobuf.FacilityType.Global) {
        Facility = other.Facility;
      }
      if (other.fDS_ != null) {
        if (fDS_ == null) {
          FDS = new global::FireXR.Protobuf.FDS();
        }
        FDS.MergeFrom(other.FDS);
      }
      if (other.FDSStartDelay != 0F) {
        FDSStartDelay = other.FDSStartDelay;
      }
      if (other.DaylightTime != 0F) {
        DaylightTime = other.DaylightTime;
      }
      scenarios_.Add(other.scenarios_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadUInt32();
            break;
          }
          case 16: {
            Version = input.ReadInt32();
            break;
          }
          case 26: {
            Title = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 40: {
            Facility = (global::FireXR.Protobuf.FacilityType) input.ReadEnum();
            break;
          }
          case 50: {
            if (fDS_ == null) {
              FDS = new global::FireXR.Protobuf.FDS();
            }
            input.ReadMessage(FDS);
            break;
          }
          case 61: {
            FDSStartDelay = input.ReadFloat();
            break;
          }
          case 69: {
            DaylightTime = input.ReadFloat();
            break;
          }
          case 74:
          case 72: {
            scenarios_.AddEntriesFrom(input, _repeated_scenarios_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ID = input.ReadUInt32();
            break;
          }
          case 16: {
            Version = input.ReadInt32();
            break;
          }
          case 26: {
            Title = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 40: {
            Facility = (global::FireXR.Protobuf.FacilityType) input.ReadEnum();
            break;
          }
          case 50: {
            if (fDS_ == null) {
              FDS = new global::FireXR.Protobuf.FDS();
            }
            input.ReadMessage(FDS);
            break;
          }
          case 61: {
            FDSStartDelay = input.ReadFloat();
            break;
          }
          case 69: {
            DaylightTime = input.ReadFloat();
            break;
          }
          case 74:
          case 72: {
            scenarios_.AddEntriesFrom(ref input, _repeated_scenarios_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
